/**
*
*   Sort.js
*   @version: 0.2.3
*
*   Sorting Algorithms implemented in JavaScript
*   https://github.com/foo123/SortingAlgorithms
*
**/!function(t,r,e,i,n){"use strict";e=e?[].concat(e):[];var o,a,s=Array,u=s.prototype,l=e.length,f=new s(l);if("object"==typeof module&&module.exports){if(n===module.exports[r]){for(o=0;l>o;o++)f[o]=module.exports[e[o][0]]||require(e[o][1])[e[o][0]];a=i.apply(t,f),module.exports[r]=a||1}}else if("function"==typeof define&&define.amd)define(["exports"].concat(e.map(function(t){return t[1]})),function(o){if(n===o[r]){var s,l=u.slice.call(arguments,1),c=l.length;for(s=0;c>s;s++)f[s]=o[e[s][0]]||l[s];a=i.apply(t,f),o[r]=a||1}});else if(n===t[r]){for(o=0;l>o;o++)f[o]=t[e[o][0]];a=i.apply(t,f),t[r]=a||1}}(this.self||this,"Sort",null,function(t){var r={},e=r.Sort={VERSION:"0.2.3"},i=this,n=Function.prototype,o=Object.prototype,a=Array.prototype,s=n.call.bind(a.slice),u=n.call.bind(o.toString),l=e.isNode="undefined"!=typeof global&&"[object global]"===u(global),f=e.isBrowser=!l&&"undefined"!=typeof navigator,c=e.isWorker="function"==typeof importScripts&&navigator instanceof WorkerNavigator,h=(e.supportsWorker="function"==typeof Worker,e.getPath=function(){var t,r=null;return l?{path:__dirname,file:__filename}:(c?r=self.location.href:f&&(t=document.getElementsByTagName("script"))&&t.length&&(r=t[t.length-1].src),r?{path:r.split("/").slice(0,-1).join("/"),file:""+r}:{path:null,file:null})}),g=h(),p=function(t){return t&&t!==g.file};c&&(i.console={log:function(t){postMessage({event:"console.log",data:{output:t||""}})},error:function(t){postMessage({event:"console.error",data:{output:t||""}})}},onmessage=function(t){var r=t.data.event,i=t.data.data||null;switch(r){case"init":break;case"import":if(i&&i["import"]&&i["import"].length){var n=i["import"].filter(p);n.length&&importScripts(n.join(","))}break;case"sort":if(i){var o=[];i.algorithm&&e[i.algorithm]&&i.data&&(o=e[i.algorithm](i.data)),postMessage({event:"sort",data:o})}break;case"dispose":default:close()}}),e.Array=Array,e.Array32F="undefined"!=typeof Float32Array?Float32Array:Array,e.Array64F="undefined"!=typeof Float64Array?Float64Array:Array,e.Array8I="undefined"!=typeof Int8Array?Int8Array:Array,e.Array16I="undefined"!=typeof Int16Array?Int16Array:Array,e.Array32I="undefined"!=typeof Int32Array?Int32Array:Array,e.Array8U="undefined"!=typeof Uint8Array?Uint8Array:Array,e.Array16U="undefined"!=typeof Uint16Array?Uint16Array:Array,e.Array32U="undefined"!=typeof Uint32Array?Uint32Array:Array,e.utils={};{var d,m=Math.min,y=Math.max,v=Math.sqrt,b=Math.log,w=Math.random,k=e.utils.RandomInteger=function(t,r){return~~((r-t)*w()+t)},S=e.utils.Uniform=function(r,e){return r=t===r?0:r,e=t===e?1:e,(e-r)*w()+r},A=!1;e.utils.Gauss=function(r,e){if(r=t===r?0:r,e=t===e?1:e,A)return A=!1,r+e*d;for(var i,n,o,a,s,u=!0;u;)i=S(-1,1),n=S(-1,1),o=i*i+n*n,u=0>=o||o>=1;return a=v(-2*b(o)/o),d=n*a,A=!0,s=i*a,r+e*s},e.utils.Sign=function(t){return t?0>t?-1:1:0},e.utils.asNumbers=function(t,r){return t-r}}e.Shuffle=function(t){for(var r,e,i=t.length;i--;)r=k(0,i),e=t[i],t[i]=t[r],t[r]=e;return t},e.isSorted=function(t,r){var e,i,n,o,a,s=t.length;if(1>=s)return!0;if(r=r||!1,i=t[1]-t[0],o=i?0>i?-1:1:0,r&&0>o)return!1;for(a=o?!1:!0,e=1;s>e;e++){if(i=t[e]-t[e-1],n=i?0>i?-1:1:0,a&&n&&(o=n,a=!1),r&&0>n)return!1;if(n&&n-o)return!1}return!0},e.utils.Constant=function(t,r){var e=new Array(t);for(r=r||0;t--;)e[t]=r;return e},e.utils.Duplicates=function(t,r,e){var i,n,o=new Array(t),a=r;for(n=0,i=0;t>i;i++)o[i]=a,n>=e&&(n=0,a+=r),n++;return o},e.utils.Range=function(t){for(var r=new Array(t);t--;)r[t]=t;return r},e.utils.ReverseRange=function(t){for(var r=new Array(t),e=t;e--;)r[e]=t-1-e;return r},e.utils.Equidistant=function(t,r,e,i){var n,o=new Array(t),a=r;for(n=0;t>n;n++)o[n]=a,a+=i;return o},e.utils.IntegerEquidistributable=function(t,r,e){var i,n=new Array(t);for(i=0;t>i;i++)n[i]=k(r,e);return n},e.utils.NumberEquidistributable=function(t,r,e){var i,n=new Array(t);for(i=0;t>i;i++)n[i]=S(r,e);return n},e.utils.IntegerDynamicRange=function(t,r,e,i,n){var o,a,s=new Array(t),u=0;for(a=0,o=0;t>o;o++)s[o]=k(r,e)+u,a>=n&&(a=0,u+=i),a++;return s},e.utils.NumberDynamicRange=function(t,r,e,i,n){var o,a,s=new Array(t),u=0;for(a=0,o=0;t>o;o++)s[o]=S(r,e)+u,a>=n&&(a=0,u+=i),a++;return s};var I=e.utils.Timer=function(t){var r=arguments.length?t:(new Date).getTime(),e=1/0,i=1/0,n=0;this.getMs=function(){var t=e-r;return i=m(i,t),n=y(n,t),t},this.start=function(){return r=(new Date).getTime(),this},this.end=function(){return e=(new Date).getTime(),this},this.reset=function(){return r=(new Date).getTime(),e=1/0,this},this.update=function(){return e=(new Date).getTime(),r=e,this}};return e.Time=function(t,r){var e,i,n=300,o=300,a=n+o;return r&&(i=s(arguments),i.shift(),i.shift(),e=new I,e.start(),setTimeout(function(){r.apply({},i),setTimeout(function(){e.end();var r=e.getMs()-a;t&&t.call(e,r)},o)},n)),0},e.vTime=function(t,r,i){return i=i||[],e.Time.apply(e,[t,r].concat(i))},!function(t){"use strict";var r=t.utils.asNumbers;t.BuiltinSort=function(t){return t.sort(r),t},t.BuiltinSort.reference="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",t.BuiltinSort.description="This is JavaScript's builtin algorithm, usually a variation of quicksort."}(e),!function(t){"use strict";t.BubbleSort=function(t){var r,e,i,n=t.length;if(n>1)do{for(e=0,r=1;n-1>=r;r++)t[r-1]>t[r]&&(i=t[r-1],t[r-1]=t[r],t[r]=i,e=r);n=e}while(n>0);return t},t.BubbleSort.reference="http://en.wikipedia.org/wiki/Bubble_sort",t.BubbleSort.description="Bubble sort is a simple sorting algorithm that works by repeatedly stepping through the list to be sorted, comparing each pair of adjacent items and swapping them if they are in the wrong order. The pass through the list is repeated until no swaps are needed, which indicates that the list is sorted."}(e),!function(t){"use strict";t.CocktailSort=function(t){var r,e,i,n,o,a=t.length;if(a>1){r=-1,e=a-2;do{for(i=!1,r++,n=r;e>=n;n++)t[n]>t[n+1]&&(o=t[n],t[n]=t[n+1],t[n+1]=o,i=!0);if(0==i)break;for(i=!1,e--,n=e;n>=r;n--)t[n]>t[n+1]&&(o=t[n],t[n]=t[n+1],t[n+1]=o,i=!0)}while(i)}return t},t.CocktailSort.reference="http://en.wikipedia.org/wiki/Cocktail_shaker_sort",t.CocktailSort.description="Cocktail sort is a variation of bubble sort that is both a stable sorting algorithm and a comparison sort. The algorithm differs from a bubble sort in that it sorts in both directions on each pass through the list. This sorting algorithm is only marginally more difficult to implement than a bubble sort, and solves the problem of turtles in bubble sorts."}(e),!function(t){"use strict";var r=[701,301,132,57,23,10,4,1],e=r.length;t.ShellSort=function(t){var i,n,o,a,s,u=t.length;if(1>=u)return t;for(o=0;e>o;o++)for(i=r[o],a=i;u>a;a+=i){for(n=t[a],s=a;s>=i&&t[s-i]>n;s-=i)t[s]=t[s-i];t[s]=n}return t},t.ShellSort.reference="http://en.wikipedia.org/wiki/Shellsort",t.ShellSort.description="Shellsort is an in-place comparison sort. It generalizes an exchanging sort, such as insertion or bubble sort, by starting the comparison and exchange of elements with elements that are far apart before finishing with neighboring elements. Starting with far apart elements can move some out-of-place elements into position faster than a simple nearest neighbor exchange."}(e),!function(t){"use strict";var r=Math.floor,e=function(t,r,i){var n,o=2*r+1,a=2*r+2,s=r;i>o&&t[o]>t[r]&&(s=o),i>a&&t[a]>t[s]&&(s=a),s!==r&&(n=t[r],t[r]=t[s],t[s]=n,e(t,s,i))},i=function(t){var i,n=t.length;for(i=r(n/2);i>=0;i--)e(t,i,n);return t};t.HeapSort=function(t){var r,n,o=t.length;if(1>=o)return t;for(i(t),n=o-1;n>0;n--)r=t[0],t[0]=t[n],t[n]=r,o--,e(t,0,o);return t},t.HeapSort.reference="http://en.wikipedia.org/wiki/Heap_sort",t.HeapSort.description="Heapsort is a comparison-based sorting algorithm to create a sorted array (or list), and is part of the selection sort family. Although somewhat slower in practice on most machines than a well-implemented quicksort, it has the advantage of a more favorable worst-case O(nlogn) runtime."}(e),!function(t){"use strict";t.InsertionSort=function(t){var r,e,i,n=t.length;if(n>1)for(r=1;n>r;r++){for(e=t[r],i=r;i>0&&e<t[i-1];)t[i]=t[i-1],i--;t[i]=e}return t},t.InsertionSort.reference="http://en.wikipedia.org/wiki/Insertion_sort",t.InsertionSort.description="Insertion sort is a simple sorting algorithm that builds the final sorted array (or list) one item at a time. It is much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, insertion sort provides several advantages.."}(e),!function(t){"use strict";t.CycleSort=function(t){var r,e,i,n,o,a=t.length;if(a>1)for(r=0;a>r;r++){for(e=t[r],i=r,n=r+1;a>n;n++)t[n]<e&&i++;if(i!=r){for(;e==t[i];)i++;for(o=t[i],t[i]=e,e=o;i!=r;){for(i=r,n=r+1;a>n;n++)t[n]<e&&i++;for(;e==t[i];)i++;o=t[i],t[i]=e,e=o}}}return t},t.CycleSort.reference="http://en.wikipedia.org/wiki/Cycle_sort",t.CycleSort.description="Cycle sort is an in-place, unstable sorting algorithm, a comparison sort that is theoretically optimal in terms of the total number of writes to the original array, unlike any other in-place sorting algorithm. It is based on the idea that the permutation to be sorted can be factored into cycles, which can individually be rotated to give a sorted result."}(e),!function(t){"use strict";var r=function(t,r,e,i){for(var n,o;;){if(n=e+~~(.5*(i-e)),e==i)return null!==t[n]&&t[n]<=r?n+1:n;for(o=n;i>o&&null===t[o];)o++;if(o!=i)if(o!=e){if(t[o]==r)return o+1;t[o]>r?i=o-1:e=o+1}else{if(t[o]>r)return o;e=o+1}else{if(null!==t[o]&&t[o]<=r)return o+1;i=n}}},e=function(t,r,e,i){var n;if(null===t[e])t[e]=r;else{for(;null!==t[e];)n=t[e],t[e]=r,r=n,e++;t[e]=r,e++}e>i[0]&&(i[0]=e)},i=function(t,r,e,i){var n,o,a,s,u,l,f=t.length;for(n=new Array(f),o=a=1,s=u=0;e>o;){for(l=0;r>l;)null!==t[a]&&(n[u]=t[a],u++),t[a]=null,a++,l++;null!==t[a]&&(n[u]=t[a],u++),t[a]=n[s],a++,s++,o++}i[0]=a-1};t.LibrarySort=function(t,n){var o,a,s,u,l,f,c,h,g,p,d=t.length;for(n=n||0,s=~~(n*d+.5),a=d+s,o=new Array(a),g=0;a>g;g++)o[g]=null;for(o[0]=t[0],u=[0],l=f=1;d>l;){for(c=l;d>l&&c>0;)h=r(o,t[f],0,u[0]),e(o,t[f],h,u),c--,l++,f++;i(o,s,l,u)}for(p=0,g=0;a>g;g++)null!==o[g]&&(t[p++]=o[g]);return t},t.LibrarySort.reference="http://en.wikipedia.org/wiki/Library_sort",t.LibrarySort.description="Library sort, or gapped insertion sort is a sorting algorithm that uses an insertion sort, but with gaps in the array to accelerate subsequent insertions. Like the insertion sort it is based on, library sort is a stable comparison sort and can be run as an online algorithm; however, it was shown to have a high probability of running in O(nlogn) time (comparable to quicksort), rather than an insertion sort's O(n<sup>2</sup>)."}(e),!function(t,r){"use strict";var e=Array.prototype.splice,i=Math.min,n=function(t,r,i,n){if(n>r){for(var o=n-r+1,a=new Array(o),s=0,u=r,l=i+1;i>=u&&n>=l;)a[s++]=t[u]<=t[l]?t[u++]:t[l++];for(;i>=u;)a[s++]=t[u++];for(;n>=l;)a[s++]=t[l++];e.apply(t,[r,o].concat(a))}return t},o=t.RecursiveMergeSort=function(t,e,i){if(r===e&&r===i&&(e=0,i=t.length-1),i>e){var a=~~(e+.5*(i-e+1));o(t,e,a-1),o(t,a,i),n(t,e,a-1,i)}return t};t.MergeSort=function(t){var r=t.length;if(r>1)for(var e,o,a=r,s=1,u=2;a;){for(o=r-s,e=0;o>e;e+=u)n(t,e,e+s-1,i(e+u-1,r-1));s<<=1,u<<=1,a>>=1}return t},t.RecursiveMergeSort.reference=t.MergeSort.reference="http://en.wikipedia.org/wiki/Merge_sort",t.RecursiveMergeSort.description=t.MergeSort.description="Merge sort is an O(nlogn) comparison-based sorting algorithm. Most implementations produce a stable sort, which means that the implementation preserves the input order of equal elements in the sorted output. Mergesort is a divide and conquer algorithm."}(e),!function(t,r){"use strict";var e=function(t,r,e){var i,n,o,a,s;for(i=~~(r+.5*(e-r)),n=t[i],o=t[i],t[i]=t[e],t[e]=o,a=r,s=r;e>s;s++)t[s]<=n&&(o=t[s],t[s]=t[a],t[a]=o,a++);return o=t[a],t[a]=t[e],t[e]=o,a},i=t.RecursiveQuickSort=function(t,n,o){if(r===n&&r===o&&(n=0,o=t.length-1),o>n){var a;a=e(t,n,o),i(t,n,a-1),i(t,a+1,o)}return t};t.QuickSort=function(t,i,n){if(r===i&&r===n&&(i=0,n=t.length-1),n>i){var o,a,s,u;for(s=n-i+1,o=new Array(s),a=-1,o[++a]=i,o[++a]=n;a>=0;)n=o[a--],i=o[a--],u=e(t,i,n),u-1>i&&(o[++a]=i,o[++a]=u-1),n>u+1&&(o[++a]=u+1,o[++a]=n)}return t},t.RecursiveQuickSort.reference=t.QuickSort.reference="http://en.wikipedia.org/wiki/Quicksort",t.RecursiveQuickSort.description=t.QuickSort.description="Quicksort is a sorting algorithm that, on average, makes O(nlogn) comparisons to sort n items. In the worst case, it makes O(n<sup>2</sup>) comparisons, though this behavior is rare. Quicksort is often faster in practice than other O(nlogn) algorithms. Additionally, quicksort's sequential and localized memory references work well with a cache. Quicksort is a comparison sort and, in efficient implementations, is not a stable sort."}(e),!function(t){"use strict";t.TimSort=function(t){return t},t.TimSort.reference="http://en.wikipedia.org/wiki/Timsort",t.TimSort.description="<strong>NOT IMPLEMENTED YET</strong> Timsort is a hybrid sorting algorithm, derived from merge sort and insertion sort, designed to perform well on many kinds of real-world data. It is used in the Python programming language. The algorithm finds subsets of the data that are already ordered, and uses that knowledge to sort the remainder more efficiently. This is done by merging an identified subset, called a run, with existing runs until certain criteria are fulfilled. Timsort has been Python's standard sorting algorithm since version 2.3. It is used to sort arrays in Java SE 7, on the Android platform, and in GNU Octave."}(e),!function(t){"use strict";t.CountingSort=function(t){var r,e,i,n,o,a,s,u,l,f=t.length;if(f>1){for(r=e=t[0],a=1;f>a;a++)t[a]>e?e=t[a]:t[a]<r&&(r=t[a]);for(s=~~e+1,i=new Array(s),a=0;s>a;a++)i[a]=0;for(a=0;f>a;a++)i[~~t[a]]++;for(o=0,a=0;s>a;a++)n=i[a],i[a]=o,o+=n;for(l=t.slice(),a=0;f>a;a++)u=l[a],t[i[~~u]]=u,i[~~u]++}return t},t.CountingSort.reference="http://en.wikipedia.org/wiki/Counting_sort",t.CountingSort.description="Counting sort is an algorithm for sorting a collection of objects according to keys that are small integers, that is, it is an integer sorting algorithm. It operates by counting the number of objects that have each distinct key value, and using arithmetic on those counts to determine the positions of each key value in the output sequence. Its running time is linear in the number of items and the difference between the maximum and minimum key values, so it is only suitable for direct use in situations where the variation in keys is not significantly greater than the number of items. However, it is often used as a subroutine in another sorting algorithm, radix sort, that can handle larger keys more efficiently."}(e),!function(t){"use strict";var r=Math.floor,e=function(t){var r,e,i,n=t.length;for(i=1;n>i;i++){for(r=t[i],e=i-1;e>=0&&r<t[e];)t[e+1]=t[e],e--;t[e+1]=r}return t},i=function(t){var e,i,n,o=[],a=t.length,s=1/a;for(n=0;a>n;n++)i=t[n],e=r(i/s),o[e]||(o[e]=[]),o[e].push(i);return o},n=function(t,r){var e,i=t.length;for(e=0;i>e;e++)t[e]&&(t[e]=r(t[e]));return t},o=function(t){var r,e,i=[],n=t.length;for(r=0;n>r;r++)e=t[r],e&&(i=i.concat(e));return i},a=e;t.BucketSort=function(t,r){var e,s,u,l,f=t.length;if(a=r||a,f>1){for(s=i(t),n(s,a),e=o(s),l=f%2,u=0;f>u;u+=2)t[u]=e[u],t[u+1]=e[u+1];l&&(t[f-1]=e[f-1])}return t},t.BucketSort.reference="http://en.wikipedia.org/wiki/Bucket_sort",t.BucketSort.description="Bucket sort is a sorting algorithm that works by partitioning an array into a number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm. It is a distribution sort, and is a cousin of radix sort in the most to least significant digit flavour. Bucket sort is a generalization of pigeonhole sort. Since bucket sort is not a comparison sort, the &Omega;(nlogn) lower bound is inapplicable. The computational complexity estimates involve the number of buckets."}(e),!function(t){"use strict";{var r=t.Array,e=Math.round;Math.floor}t.PermutationSort=function(t){var r,e,i,n=t.length;if(n>1)for(r=t.slice(),e=0;n>e;e++)i=r[e],t[i]=i;return t},t.PermutationSort.reference="#A Custom Algorithm",t.PermutationSort.description="Algorithm for sorting permutations of the integer set [0, N-1], with no duplicates, by (trivial) re-indexing",t.IndexSort=function(t){var i,n,o,a,s,u,l,f,c,h,g,p,d,m,y,v,b=t.length;if(b>1){for(i=n=t[0],v=t[1]-t[0],d=v?0>v?-1:1:0,m=d?!1:!0,y=!0,s=1;b>s;s++)y&&(v=t[s]-t[s-1],p=v?0>v?-1:1:0,m&&p&&(d=p,m=!1),p&&p-d&&(y=!1)),t[s]>n?n=t[s]:t[s]<i&&(i=t[s]);if(y)return 0>p&&t.reverse(),t;for(o=(b-1)/(n-i),f=b,c=new r(b),l=new r(f),s=0;f>s;s++)l[s]=0;for(s=0;b>s;s++)v=t[s],u=c[s]=e(o*(v-i)),l[u]++;for(h=0,s=0;f>s;s++)g=l[s],l[s]=h,h+=g;for(a=t.slice(),s=0;b>s;s++)u=c[s],t[l[u]]=a[s],l[u]++}return t},t.IndexSort.reference="#A Custom Algorithm",t.IndexSort.description="Algorithm for sorting random numbers close to being 'homogeneous-equidistant' in [m, M], with possible duplicates, by re-indexing (an extended version of PermutationSort)"}(e),!function(t){"use strict";{var r=t.Array64F,e=t.Array32U,i=Array.prototype.splice,n=(Math.floor,Math.round);Math.ceil,t.StatisticalSort=function(t){var o,a,s,u,l,f,c,h,g,p,d,m,y,v=t.length;if(v>1){for(o=v%2,c=h=t[0],f=t[1]-t[0],s=f?0>f?-1:1:0,u=s?!1:!0,l=!0,m=1;v>m;m++)l&&(f=t[m]-t[m-1],a=f?0>f?-1:1:0,u&&a&&(s=a,u=!1),a&&a-s&&(l=!1)),t[m]>h?h=t[m]:t[m]<c&&(c=t[m]);if(l)return 0>a&&t.reverse(),t;d=1/(h-c);var b,w=new e(v),k=new r(v+1),S=0;for(k[0]=0,g=d,p=v*g,b=-c+1,m=0;v>m;m+=2)k[m+1]=g*(t[m]+b)+k[m],k[m+2]=g*(t[m+1]+b)+k[m+1],w[m]=n(p*(t[m]+b)),w[m+1]=n(p*(t[m+1]+b));o&&(k[v]=g*(t[v-1]+b)+k[v-1],w[v-1]=n(p*(t[v-1]+b))),S=k[v],g=(v-1)/S;var A=new Array(v),I=new Array(v);for(m=0;v>m;m++)A[m]=null;for(m=0;v>m;m++)y=n(g*k[w[m]]),f=t[m],A[y]?(A[y].push(f),f>I[y][1]?I[y][1]=f:f<I[y][0]&&(I[y][0]=f)):(A[y]=[f],I[y]=new r([f,f]));w=k=null;var M,T,x,C,q,B=0;for(m=0;v>m;m++)if(null!==A[m]){if(M=A[m],T=M.length,x=I[m][0],C=I[m][1],x==C)i.apply(t,[B,T].concat(M));else for(g=(T-1)/(h-c),q=0;T>q;q++)y=n(g*(M[q]-x)),t[B+y]=M[q];B+=T,A[m]=I[m]=null}}return t}}t.StatisticalSort.reference="#A Custom Algorithm",t.StatisticalSort.description="(in progress)"}(e),r.Sort});